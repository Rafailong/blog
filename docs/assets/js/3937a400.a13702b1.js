"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[585],{9036:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return s},contentTitle:function(){return i},metadata:function(){return p},assets:function(){return u},toc:function(){return c},default:function(){return h}});var n=a(7462),l=a(3366),o=(a(7294),a(3905)),r=["components"],s={slug:"dollar-sign-operator",title:"haskell dollar-sign operator",authors:["ravila"],tags:["haskell"]},i=void 0,p={permalink:"/blog/dollar-sign-operator",editUrl:"https://github.com/Rafailong/blog/tree/main/docs/blog/2021-12-27-dollar-sign-operator.md",source:"@site/blog/2021-12-27-dollar-sign-operator.md",title:"haskell dollar-sign operator",description:"The ($) operator is a convenience for when you want to express",date:"2021-12-27T00:00:00.000Z",formattedDate:"December 27, 2021",tags:[{label:"haskell",permalink:"/blog/tags/haskell"}],readingTime:.74,truncated:!1,authors:[{name:"Rafael Avila",url:"https://github.com/Rafailong",imageURL:"https://github.com/Rafailong.png",key:"ravila"}],nextItem:{title:"Welcome",permalink:"/blog/welcome"}},u={authorsImageUrls:[void 0]},c=[],m={toc:c};function h(e){var t=e.components,a=(0,l.Z)(e,r);return(0,o.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"($)")," operator is a convenience for when you want to express\nsomething with less pairs of parenths."),(0,o.kt)("p",null,"Type of ",(0,o.kt)("inlineCode",{parentName:"p"},"($)")," is:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-haskell"},"($) :: (a -> b) -> a -> b -- Defined in \u2018GHC.Base\u2019\ninfixr 0 $\n")),(0,o.kt)("p",null,"Which means that:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"it is a infix operator"),(0,o.kt)("li",{parentName:"ol"},"it associates to the right"),(0,o.kt)("li",{parentName:"ol"},"and, it has the lowest possibile precedence")),(0,o.kt)("p",null,"Usage example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-haskell"},"_ =(2^) (2 + 2) -- 16\n")),(0,o.kt)("p",null,"Above code we need all the parenths because we want to first evaluate\n",(0,o.kt)("inlineCode",{parentName:"p"},"(2 + 2)"),". If we remove the parenths the result is different:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-haskell"},"_ = (2^) 2 + 2 -- 6\n")),(0,o.kt)("p",null,"Here is where ",(0,o.kt)("inlineCode",{parentName:"p"},"($)")," comes handy:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-haskell"},"_ = (2^) $ 2 + 2 -- 16\n")),(0,o.kt)("p",null,"This happens because of how ",(0,o.kt)("inlineCode",{parentName:"p"},"($)")," associates.\nSo, first ",(0,o.kt)("inlineCode",{parentName:"p"},"(2 + 2)")," is evaluted and its results is used in ",(0,o.kt)("inlineCode",{parentName:"p"},"(2^)"),"."))}h.isMDXComponent=!0}}]);