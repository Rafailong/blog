"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[635],{3905:function(e,t,r){r.d(t,{Zo:function(){return c},kt:function(){return f}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),p=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},c=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=p(r),f=a,d=m["".concat(s,".").concat(f)]||m[f]||u[f]||o;return r?n.createElement(d,l(l({ref:t},c),{},{components:r})):n.createElement(d,l({ref:t},c))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,l=new Array(o);l[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var p=2;p<o;p++)l[p]=r[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},1389:function(e,t,r){r.r(t),r.d(t,{assets:function(){return c},contentTitle:function(){return s},default:function(){return f},frontMatter:function(){return i},metadata:function(){return p},toc:function(){return u}});var n=r(3117),a=r(102),o=(r(7294),r(3905)),l=["components"],i={slug:"dollar-sign-operator",title:"haskell dollar-sign operator",authors:["ravila"],tags:["haskell"]},s=void 0,p={permalink:"/blog/dollar-sign-operator",editUrl:"https://github.com/Rafailong/blog/tree/main/docs/blog/2021-12-27-dollar-sign-operator.md",source:"@site/blog/2021-12-27-dollar-sign-operator.md",title:"haskell dollar-sign operator",description:"The ($) operator is a convenience for when you want to express",date:"2021-12-27T00:00:00.000Z",formattedDate:"December 27, 2021",tags:[{label:"haskell",permalink:"/blog/tags/haskell"}],readingTime:.74,truncated:!1,authors:[{name:"Rafael Avila",url:"https://github.com/Rafailong",imageURL:"https://github.com/Rafailong.png",key:"ravila"}],frontMatter:{slug:"dollar-sign-operator",title:"haskell dollar-sign operator",authors:["ravila"],tags:["haskell"]},prevItem:{title:"sorted squared array",permalink:"/blog/sorted-squared-array"},nextItem:{title:"Welcome",permalink:"/blog/welcome"}},c={authorsImageUrls:[void 0]},u=[],m={toc:u};function f(e){var t=e.components,r=(0,a.Z)(e,l);return(0,o.kt)("wrapper",(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"($)")," operator is a convenience for when you want to express\nsomething with less pairs of parenths."),(0,o.kt)("p",null,"Type of ",(0,o.kt)("inlineCode",{parentName:"p"},"($)")," is:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-haskell"},"($) :: (a -> b) -> a -> b -- Defined in \u2018GHC.Base\u2019\ninfixr 0 $\n")),(0,o.kt)("p",null,"Which means that:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"it is a infix operator"),(0,o.kt)("li",{parentName:"ol"},"it associates to the right"),(0,o.kt)("li",{parentName:"ol"},"and, it has the lowest possibile precedence")),(0,o.kt)("p",null,"Usage example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-haskell"},"_ =(2^) (2 + 2) -- 16\n")),(0,o.kt)("p",null,"Above code we need all the parenths because we want to first evaluate\n",(0,o.kt)("inlineCode",{parentName:"p"},"(2 + 2)"),". If we remove the parenths the result is different:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-haskell"},"_ = (2^) 2 + 2 -- 6\n")),(0,o.kt)("p",null,"Here is where ",(0,o.kt)("inlineCode",{parentName:"p"},"($)")," comes handy:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-haskell"},"_ = (2^) $ 2 + 2 -- 16\n")),(0,o.kt)("p",null,"This happens because of how ",(0,o.kt)("inlineCode",{parentName:"p"},"($)")," associates.\nSo, first ",(0,o.kt)("inlineCode",{parentName:"p"},"(2 + 2)")," is evaluted and its results is used in ",(0,o.kt)("inlineCode",{parentName:"p"},"(2^)"),"."))}f.isMDXComponent=!0}}]);