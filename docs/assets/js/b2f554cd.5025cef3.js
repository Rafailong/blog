"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[477],{10:function(e){e.exports=JSON.parse('{"blogPosts":[{"id":"sorted-squared-array","metadata":{"permalink":"/blog/sorted-squared-array","editUrl":"https://github.com/Rafailong/blog/tree/main/docs/blog/2022-01-03-sorted-squared-array/index.mdx","source":"@site/blog/2022-01-03-sorted-squared-array/index.mdx","title":"sorted squared array","description":"this time we will try to (satisfactory) solve a coding challenge.","date":"2022-01-03T00:00:00.000Z","formattedDate":"January 3, 2022","tags":[{"label":"algo","permalink":"/blog/tags/algo"},{"label":"kotlin","permalink":"/blog/tags/kotlin"}],"readingTime":1.605,"truncated":false,"authors":[{"name":"Rafael Avila","url":"https://github.com/Rafailong","imageURL":"https://github.com/Rafailong.png","key":"ravila"}],"nextItem":{"title":"haskell dollar-sign operator","permalink":"/blog/dollar-sign-operator"}},"content":"import CodeBlock from \'@theme/CodeBlock\';\\nimport Tabs from \'@theme/Tabs\';\\nimport TabItem from \'@theme/TabItem\';\\n\\nimport FirstAttempt from \'!!raw-loader!./solutions/first-attempt.kts\';\\nimport SecondAttempt from \'!!raw-loader!./solutions/second-attempt.kts\';\\nimport BonusAttempt from \'!!raw-loader!./solutions/bonus-attempt.kts\';\\nimport BonusScalaSolution from \'!!raw-loader!./solutions/scala-bonus.worksheet.sc\';\\n\\nthis time we will try to (satisfactory) solve a coding challenge.\\n\\n### description\\n\\nwrite a function that takes in a non-empty array of integers that are sorted\\nin ascending order and returns a new array of the same length with the squares\\nof the original integers also sorted in ascending order.\\n\\n### first attempt\\n\\nfirst attempt (which fails when `array` includes negative numbers)\\ngiven `array = [-2, -1]` as input, output is `[4, 1]` which is wrong\\nbecause correct output should be sorted in ascending order:\\n\\n<CodeBlock className=\\"language-kotlin\\" title=\\"first-attempt.kts\\">{FirstAttempt}</CodeBlock>\\n\\nwhat i like from `first-attempt` (failed) solution is that\\n**we have no state** (we are not mutating anything), we are only\\ntraversing our input array once and generating a new array as our output.\\n\\n### second attempt\\n\\nan _optimal_ solution would be to use a data structure that preserves\\nthe order of its elements i.e binary tree; but, given that we have no b-tree at our disposal we can leverage\\nKotlin native [BinarySearch](https://kotlinlang.org/docs/list-operations.html#binary-search-in-sorted-lists)\\nmethods in `List`. we need to be careful with the return value of \\nsuch a function in order to prevent index bound exceptions:\\n\\n<CodeBlock className=\\"language-kotlin\\" title=\\"second-attempt.kts\\">{SecondAttempt}</CodeBlock>\\n\\nwhat i **dislike** from `second-attempt` solution is that: we have state mutations.\\non the other hand, i like that we are still traversing our input array once \\nmeaning `O(n)` complexity which I think is nice!\\n\\n### bonus\\n\\nas a bonus here is a 3rd optional solution that is not as efficient as the previous one\\nbut this third solution is based on immutable data structures which is always good:\\n\\n<Tabs>\\n  <TabItem value=\\"kotlin\\" label=\\"Kotlin\\" default>\\n    <CodeBlock className=\\"language-kotlin\\" title=\\"bonus-attempt.kts\\">{BonusAttempt}</CodeBlock>\\n  </TabItem>\\n  <TabItem value=\\"scala\\" label=\\"Scala\\">\\n    <CodeBlock className=\\"language-scala\\" title=\\"scala-bonus.worksheet.sc\\">{BonusScalaSolution}</CodeBlock>\\n  </TabItem>\\n</Tabs>\\n\\n> PD. in case you are wondering bout the `kscript` in the codeblocks take a look at:\\n> [holgerbrandl/kscript](https://github.com/holgerbrandl/kscript)"},{"id":"dollar-sign-operator","metadata":{"permalink":"/blog/dollar-sign-operator","editUrl":"https://github.com/Rafailong/blog/tree/main/docs/blog/2021-12-27-dollar-sign-operator.md","source":"@site/blog/2021-12-27-dollar-sign-operator.md","title":"haskell dollar-sign operator","description":"The ($) operator is a convenience for when you want to express","date":"2021-12-27T00:00:00.000Z","formattedDate":"December 27, 2021","tags":[{"label":"haskell","permalink":"/blog/tags/haskell"}],"readingTime":0.74,"truncated":false,"authors":[{"name":"Rafael Avila","url":"https://github.com/Rafailong","imageURL":"https://github.com/Rafailong.png","key":"ravila"}],"prevItem":{"title":"sorted squared array","permalink":"/blog/sorted-squared-array"},"nextItem":{"title":"Welcome","permalink":"/blog/welcome"}},"content":"The `($)` operator is a convenience for when you want to express\\nsomething with less pairs of parenths.\\n\\nType of `($)` is:\\n\\n``` haskell\\n($) :: (a -> b) -> a -> b -- Defined in \u2018GHC.Base\u2019\\ninfixr 0 $\\n```\\n\\nWhich means that:\\n\\n1.  it is a infix operator\\n2.  it associates to the right\\n3.  and, it has the lowest possibile precedence\\n\\nUsage example:\\n\\n```haskell\\n_ =(2^) (2 + 2) -- 16\\n```\\n\\nAbove code we need all the parenths because we want to first evaluate\\n`(2 + 2)`. If we remove the parenths the result is different:\\n\\n```haskell\\n_ = (2^) 2 + 2 -- 6\\n```\\n\\nHere is where `($)` comes handy:\\n\\n```haskell\\n_ = (2^) $ 2 + 2 -- 16\\n```\\n\\nThis happens because of how `($)` associates.\\nSo, first `(2 + 2)` is evaluted and its results is used in `(2^)`."},{"id":"welcome","metadata":{"permalink":"/blog/welcome","editUrl":"https://github.com/Rafailong/blog/tree/main/docs/blog/2021-12-25-welcome.md","source":"@site/blog/2021-12-25-welcome.md","title":"Welcome","description":"Hi there and welcome to my blog!","date":"2021-12-25T00:00:00.000Z","formattedDate":"December 25, 2021","tags":[],"readingTime":0.19,"truncated":false,"authors":[{"name":"Rafael Avila","url":"https://github.com/Rafailong","imageURL":"https://github.com/Rafailong.png","key":"ravila"}],"prevItem":{"title":"haskell dollar-sign operator","permalink":"/blog/dollar-sign-operator"}},"content":"Hi there and welcome to my blog!\\n\\nAt a glance you will find content about things I like,\\nthings I dislike, and things I might be learning/interested on.\\n\\nSo, that is all for now. Have a good one!"}]}')}}]);