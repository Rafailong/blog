"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[9865],{3905:function(e,t,a){a.d(t,{Zo:function(){return d},kt:function(){return g}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),u=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},d=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),c=u(a),g=r,f=c["".concat(s,".").concat(g)]||c[g]||p[g]||l;return a?n.createElement(f,i(i({ref:t},d),{},{components:a})):n.createElement(f,i({ref:t},d))}));function g(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=c;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var u=2;u<l;u++)i[u]=a[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},4862:function(e,t,a){a.r(t),a.d(t,{assets:function(){return d},contentTitle:function(){return s},default:function(){return g},frontMatter:function(){return o},metadata:function(){return u},toc:function(){return p}});var n=a(7462),r=a(3366),l=(a(7294),a(3905)),i=["components"],o={slug:"available-languages",title:"find available languages",authors:["ravila"],tags:["scala","interview"]},s=void 0,u={permalink:"/blog/available-languages",editUrl:"https://github.com/Rafailong/blog/tree/main/docs/blog/2022-04-27-available-languages.md",source:"@site/blog/2022-04-27-available-languages.md",title:"find available languages",description:"description",date:"2022-04-27T00:00:00.000Z",formattedDate:"April 27, 2022",tags:[{label:"scala",permalink:"/blog/tags/scala"},{label:"interview",permalink:"/blog/tags/interview"}],readingTime:2.85,truncated:!0,authors:[{name:"Rafael Avila",url:"https://github.com/Rafailong",imageURL:"https://github.com/Rafailong.png",key:"ravila"}],frontMatter:{slug:"available-languages",title:"find available languages",authors:["ravila"],tags:["scala","interview"]},prevItem:{title:"balanced brackets",permalink:"/blog/balanced-brackets"},nextItem:{title:"non-constructible change",permalink:"/blog/non-constructible-change"}},d={authorsImageUrls:[void 0]},p=[{value:"description",id:"description",level:2},{value:"1 - simple",id:"1---simple",level:3},{value:"2 - support locale-only",id:"2---support-locale-only",level:3},{value:"3 - support wildcard (at the end of the header value)",id:"3---support-wildcard-at-the-end-of-the-header-value",level:3},{value:"4 - support wildcard in any position of header",id:"4---support-wildcard-in-any-position-of-header",level:3}],c={toc:p};function g(e){var t=e.components,a=(0,r.Z)(e,i);return(0,l.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"description"},"description"),(0,l.kt)("p",null,"recentry i have been in interviews to find a new professional opportunity.\ni got this code challenge from on of those interviews."),(0,l.kt)("p",null,"what i liked about this particular interview was that the code challenge had progressions/iterations:\nevery time i solved it, the interviewer added constraints or scenarios to support."),(0,l.kt)("p",null,"the code challenge was to implemente the following function:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},"/**\n * @param header a comma-separated list of languages preferred by the client (in order) `en-US,fr-CA,de-DE`\n * @param availableLanguages set of available languages in the platform\n * @return the available languages preferred by the client (in order) in the platform\n */\ndef languages(header: String, availableLanguages: Set[String]): Set[String] = ???\n")),(0,l.kt)("h3",{id:"1---simple"},"1 - simple"),(0,l.kt)("p",null,"the first solution was straightforward.\nnote that in this solution we worked under some assumptions like:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"header")," is always a good (well-formed) value"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"header")," is never empty")),(0,l.kt)("p",null,"i decided to iterate over the client's preferred languagues as that what we are interested in."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},'def languages1(header: String, availableLanguages: Set[String]): Set[String] =\n  header\n    .split(",")\n    .toSet // working with set to prevent duplicates\n    .flatMap(l => availableLanguages.filter(_ == l))\n\nlanguages1(\n  header             = "en-US,fr-CA",\n  availableLanguages = Set("fr-FR", "de-DE", "en-CA", "en-US", "fr-CA")\n).mkString(", ")\n// res0: String = "en-US, fr-CA"\n')),(0,l.kt)("h3",{id:"2---support-locale-only"},"2 - support locale-only"),(0,l.kt)("p",null,"then, the interviewer added an new use-case:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"header")," might include locale only values i.e. ",(0,l.kt)("inlineCode",{parentName:"li"},'hearder = "en-US,fr"'))),(0,l.kt)("p",null,"so i decided to use regex to validate the values after splitting ",(0,l.kt)("inlineCode",{parentName:"p"},"header")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},'def languages2(header: String, availableLanguages: Set[String]): Set[String] =\n  header\n    .split(",")\n    .toSet\n    .filter(_.matches("""([a-z]{2}\\-[A-Z]{2})|([a-z]{2})"""))\n    .flatMap { l =>\n      availableLanguages.filter(_ startsWith l)\n    }\n\nlanguages2(\n  header             = "en-US,fr",\n  availableLanguages = Set("fr-FR", "de-DE", "en-CA", "en-US", "fr-CA")\n).mkString(", ")\n// res1: String = "en-US, fr-FR, fr-CA"\n')),(0,l.kt)("h3",{id:"3---support-wildcard-at-the-end-of-the-header-value"},"3 - support wildcard (at the end of the header value)"),(0,l.kt)("p",null,"third time's the charm!"),(0,l.kt)("p",null,"a new use-case was added:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"to suppport wild-card ",(0,l.kt)("inlineCode",{parentName:"li"},"*")," at the end of the ",(0,l.kt)("inlineCode",{parentName:"li"},"header")," value i.e. ",(0,l.kt)("inlineCode",{parentName:"li"},"en-US,de-DE,*"))),(0,l.kt)("p",null,"as you migh notice i changed the signature of the code-challenge' function to return\na ",(0,l.kt)("inlineCode",{parentName:"p"},"ListSet")," instead of a ",(0,l.kt)("inlineCode",{parentName:"p"},"Set"),". i did that becuase:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"i needed the elements to be in the order that they were inserted, and"),(0,l.kt)("li",{parentName:"ul"},"i also needed ",(0,l.kt)("inlineCode",{parentName:"li"},"Set")," operations to prevent duplicates and use ",(0,l.kt)("inlineCode",{parentName:"li"},"Set::diff")," feature")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},'import scala.collection.immutable.ListSet\n\ndef languages3(\n  header: String,\n  availableLanguages: Set[String]\n): ListSet[String] = {\n  val clientlanguages = header\n    .split(",")\n    .filter(_.matches("""([a-z]{2}\\-[A-Z]{2})|([a-z]{2})|(\\*)"""))\n    .distinct\n\n  val tmpResult = ListSet.from {\n    clientlanguages.flatMap { l =>\n      availableLanguages.filter(_ startsWith l)\n    }\n  }\n\n  if !clientlanguages.contains("*") then tmpResult\n  else tmpResult ++ availableLanguages.diff(tmpResult)\n}\n\nlanguages3(\n  header             = "en-US,fr,*",\n  availableLanguages = Set("fr-FR", "de-DE", "en-CA", "en-US", "fr-CA")\n).mkString(", ")\n// res2: String = "en-US, fr-FR, fr-CA, en-CA, de-DE"\n')),(0,l.kt)("h3",{id:"4---support-wildcard-in-any-position-of-header"},"4 - support wildcard in any position of header"),(0,l.kt)("p",null,"the last use-cased that the interviewed added was to support wild-card ",(0,l.kt)("inlineCode",{parentName:"p"},"*")," in any position in the ",(0,l.kt)("inlineCode",{parentName:"p"},"header")," value."),(0,l.kt)("p",null,"again, ",(0,l.kt)("inlineCode",{parentName:"p"},"ListSet")," saved the day because if we get the wild-card in the middle (like in the example bellow)\nwe need to make sure that the langugages after it (requested by the client) are at the end\nof our return value."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},'def languages4(\n  header: String,\n  availableLanguages: Set[String]\n): ListSet[String] =\n  header\n    .split(",")\n    .filter(_.matches("""([a-z]{2}\\-[A-Z]{2})|([a-z]{2})|(\\*)"""))\n    .distinct\n    .foldLeft(ListSet.empty[String]) {\n      case (acc, l) if l == "*" => acc ++ availableLanguages.diff(acc)\n      case (acc, l) =>\n        val news = availableLanguages.filter(_.startsWith(l))\n        (acc -- news.toSet) ++ news\n    }\n\nlanguages4(\n  header             = "en-US,*,fr",\n  availableLanguages = Set("fr-FR", "de-DE", "en-CA", "en-US", "fr-CA")\n).mkString(", ")\n// res3: String = "en-US, en-CA, de-DE, fr-FR, fr-CA"\n')),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://www.scala-lang.org/api/3.1.2/scala/collection/immutable/ListSet.html"},(0,l.kt)("inlineCode",{parentName:"a"},"ListSet")," docs")))}g.isMDXComponent=!0}}]);